#![no_main]
sphinx_zkvm::entrypoint!(main);

const G1PT: [u8; 96] = [23, 26, 103, 2, 161, 174, 37, 31, 120, 196, 135, 71, 133, 211, 217, 230, 78, 42, 97, 193, 109, 173, 165, 178, 128, 217, 222, 231, 195, 100, 24, 188, 115, 42, 226, 169, 253, 119, 117, 24, 11, 232, 196, 198, 139, 250, 73, 0, 17, 148, 114, 156, 231, 202, 45, 65, 27, 153, 217, 138, 105, 147, 217, 139, 106, 45, 5, 139, 226, 164, 145, 19, 41, 164, 158, 59, 248, 105, 249, 236, 231, 82, 146, 117, 39, 14, 212, 73, 14, 94, 55, 32, 140, 156, 252, 115];

const G2PT: [u8; 192] = [23, 210, 224, 223, 251, 11, 183, 52, 254, 22, 233, 162, 15, 145, 70, 72, 213, 142, 165, 35, 174, 55, 147, 122, 211, 63, 32, 159, 22, 162, 195, 88, 30, 147, 111, 201, 92, 210, 38, 229, 24, 23, 30, 113, 204, 29, 81, 209, 8, 199, 24, 135, 145, 172, 230, 19, 3, 82, 43, 19, 80, 12, 148, 135, 207, 82, 223, 236, 52, 215, 244, 169, 39, 20, 221, 13, 42, 0, 1, 215, 5, 232, 215, 116, 251, 138, 45, 175, 247, 6, 158, 119, 131, 81, 66, 180, 14, 170, 214, 6, 177, 148, 154, 54, 80, 221, 176, 55, 117, 122, 131, 218, 80, 115, 151, 245, 122, 127, 45, 217, 15, 251, 209, 115, 190, 239, 12, 19, 141, 14, 230, 161, 162, 212, 41, 98, 161, 149, 25, 253, 41, 243, 98, 220, 14, 27, 238, 149, 212, 81, 140, 86, 127, 195, 117, 171, 103, 69, 40, 110, 210, 88, 214, 85, 54, 113, 61, 50, 142, 46, 114, 47, 223, 150, 253, 253, 229, 105, 45, 31, 146, 69, 239, 101, 46, 55, 178, 233, 199, 165, 223, 154];

const EXPECTED_OUT: [u8; 576] = [199, 2, 247, 40, 214, 245, 230, 200, 219, 215, 29, 214, 244, 206, 16, 113, 202, 75, 80, 101, 155, 120, 8, 4, 106, 73, 203, 109, 1, 157, 24, 174, 59, 132, 52, 59, 32, 158, 32, 235, 88, 147, 169, 1, 15, 107, 149, 20, 156, 212, 142, 67, 120, 124, 207, 37, 82, 183, 249, 247, 138, 213, 165, 249, 67, 18, 64, 64, 131, 78, 136, 139, 77, 27, 178, 21, 40, 141, 4, 122, 34, 229, 165, 151, 86, 100, 97, 170, 172, 41, 17, 22, 60, 2, 149, 1, 20, 127, 171, 150, 140, 21, 29, 44, 207, 130, 141, 201, 181, 176, 127, 134, 205, 133, 240, 53, 164, 81, 130, 246, 83, 39, 42, 69, 179, 27, 8, 32, 1, 161, 106, 185, 243, 114, 78, 44, 180, 151, 199, 165, 117, 43, 231, 13, 199, 89, 71, 248, 102, 97, 94, 124, 229, 103, 145, 189, 237, 9, 219, 31, 114, 137, 154, 190, 82, 140, 31, 126, 66, 245, 171, 157, 43, 104, 226, 33, 62, 202, 76, 251, 46, 2, 13, 82, 182, 77, 3, 253, 64, 224, 151, 20, 191, 116, 182, 202, 155, 229, 74, 115, 10, 134, 16, 38, 126, 30, 255, 194, 175, 37, 107, 165, 211, 27, 73, 69, 0, 76, 251, 229, 222, 241, 30, 45, 179, 60, 201, 156, 19, 30, 225, 96, 185, 148, 12, 11, 53, 155, 29, 23, 98, 7, 97, 215, 67, 84, 249, 196, 195, 231, 248, 78, 32, 147, 61, 63, 175, 98, 159, 72, 33, 200, 184, 236, 205, 101, 55, 31, 13, 137, 244, 129, 61, 241, 204, 110, 153, 170, 224, 163, 174, 167, 86, 167, 86, 90, 67, 20, 8, 145, 170, 147, 161, 218, 78, 249, 60, 4, 55, 105, 72, 5, 215, 149, 151, 181, 247, 218, 60, 118, 31, 161, 217, 135, 152, 162, 148, 31, 33, 26, 212, 36, 205, 164, 173, 143, 67, 165, 179, 156, 16, 230, 43, 234, 152, 13, 212, 170, 62, 98, 166, 53, 16, 206, 217, 101, 58, 98, 238, 66, 18, 234, 140, 84, 201, 164, 22, 48, 87, 251, 26, 105, 223, 192, 151, 204, 138, 16, 70, 96, 136, 101, 61, 103, 180, 112, 28, 150, 36, 175, 195, 191, 249, 16, 239, 58, 106, 149, 172, 16, 91, 52, 176, 224, 212, 48, 121, 229, 37, 197, 197, 154, 30, 184, 41, 59, 76, 117, 211, 121, 95, 17, 206, 11, 238, 218, 129, 38, 94, 5, 92, 42, 12, 158, 118, 30, 220, 112, 7, 198, 155, 3, 225, 252, 191, 57, 45, 176, 106, 61, 24, 155, 155, 27, 212, 184, 208, 19, 140, 88, 34, 0, 229, 169, 89, 44, 193, 220, 44, 66, 22, 185, 189, 13, 79, 77, 6, 176, 254, 65, 170, 87, 230, 13, 132, 186, 221, 39, 29, 7, 192, 44, 198, 40, 0, 83, 168, 192, 59, 157, 106, 182, 107, 150, 1, 124, 195, 240, 88, 127, 59, 113, 115, 153, 247, 45, 227, 78, 199, 21, 18, 88, 27, 95, 140, 212, 153, 185, 210, 62, 143, 76, 164, 152, 109, 62, 131, 11, 77, 222, 28, 27, 243, 70, 36, 103, 184, 91, 126, 101, 251, 187, 129, 0, 143, 144, 206, 115, 99, 160, 21, 173, 186, 196, 18, 199, 94, 245, 163, 32, 165, 137, 254, 211, 221, 203, 73, 28, 200, 31, 9, 213, 97, 17, 102, 24];

pub fn main() {
    println!("starting");
    let a = bls12_381::G1Affine::from_uncompressed(&G1PT).unwrap();
    let b = bls12_381::G2Affine::from_uncompressed(&G2PT).unwrap();
    println!("pairing");
    let c = bls12_381::pairing(&a, &b);
    println!("done!");
    let out_bytes = unsafe {
        &*core::ptr::slice_from_raw_parts(std::mem::transmute::<&bls12_381::fp::Fp, *const u8>(&c.0.c0.c0.c0), 576)
    };
    assert_eq!(EXPECTED_OUT, out_bytes);
    println!("all ok!!");
}
