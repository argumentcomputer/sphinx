name: Tests

on:
  push:
    branches: [main, dev]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    name: CI Test Suite
    runs-on: buildjet-16vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - name: Set env
        run: |
          echo "RUSTFLAGS=${{env.RUSTFLAGS}} -Copt-level=3 -Cdebug-assertions -Coverflow-checks=y -Cdebuginfo=0" | tee -a $GITHUB_ENV
          echo "RUST_LOG=1" | tee -a $GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: Dup4/actions-setup-gcc@v1
        with:
          version: latest
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@nextest
      - name: Run cargo test on wp1 except some recursion tests
        run: |
          cargo nextest run --cargo-profile dev-ci --profile ci -E 'all() - ( package(wp1-recursion-circuit) & ( test(tests::test_verify_constraints_whole) | test(tests::test_recursive_verify_shard_v2) ))'
      - name: Run cargo test with no default features
        run: |
          cargo nextest run -p wp1-core --cargo-profile dev-ci --profile ci --no-default-features --features debug -- cpu::trace::tests::generate_trace
      - name: check examples compile
        run: |
          dirs -c && for i in $(find ./ -depth 1 -type d); do pushd "$i/script"; cargo check --all; popd; done
        working-directory: ${{ github.workspace }}/examples
      - name: Run fibonacci-io example
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release --manifest-path examples/fibonacci-io/script/Cargo.toml
        env:
          RUSTFLAGS: -Copt-level=3 -Cdebug-assertions -Coverflow-checks=y -Cdebuginfo=0
          RUST_LOG: 1
          RUST_BACKTRACE: 1
  

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: Dup4/actions-setup-gcc@v1
        with:
          version: latest
      - uses: Swatinem/rust-cache@v2
      - name: Check Rustfmt Code Style
        run: cargo fmt --all --check
      - name: check *everything* compiles
        run: cargo check --all-targets --all-features --all --examples --tests --benches
      # See '.cargo/config' for list of enabled/disabled clippy lints
      - name: Check clippy warnings
        run: cargo xclippy -D warnings
      - name: Doctests
        run: cargo test --doc --workspace
      - name: Cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v1

  integration-tests-examples:
    name: Build integration tests and examples
    runs-on: buildjet-16vcpu-ubuntu-2204
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Set up git private repo access
        run: |
          git config --global url."https://${{ secrets.PRIVATE_PULL_TOKEN }}@github.com/".insteadOf ssh://git@github.com
          git config --global url."https://${{ secrets.PRIVATE_PULL_TOKEN }}@github.com".insteadOf https://github.com
      - name: Install `cargo prove` CLI
        run: |
          cargo install --locked --path ./cli
          cargo prove install-toolchain
        working-directory: ${{ github.workspace }}
      - name: Build integration tests
        run: |
          make
        working-directory: ${{ github.workspace }}/tests
      - name: Build examples
        run: |
          make
        working-directory: ${{ github.workspace }}/examples

  mac-m1:
    name: CI Tests on OSX ARM
    runs-on: macos-latest-xlarge
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - name: Set env
        run: |
          echo "RUSTFLAGS=${{env.RUSTFLAGS}} -Copt-level=3 -Cdebug-assertions -Coverflow-checks=y -Cdebuginfo=0" | tee -a $GITHUB_ENV
          echo "RUST_LOG=1" | tee -a $GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - uses: Dup4/actions-setup-gcc@v1
        with:
          version: latest
      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@nextest
      - name: Run cargo test on wp1 except some recursion tests
        run: |
          cargo nextest run --cargo-profile dev-ci --profile ci -E 'all() - ( package(wp1-recursion-circuit) & ( test(tests::test_verify_constraints_whole) | test(tests::test_recursive_verify_shard_v2) ))'
      - name: Run cargo test with no default features
        run: |
          cargo nextest run -p wp1-core --cargo-profile dev-ci --profile ci --no-default-features --features debug -- cpu::trace::tests::generate_trace
      - name: check examples compile
        run: |
          dirs -c && for i in $(find ./ -depth 1 -type d); do pushd "$i/script"; cargo check --all; popd; done
        working-directory: ${{ github.workspace }}/examples
      - name: Set env
        if: failure()
        run: |
          echo "WORKFLOW_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" | tee -a $GITHUB_ENV
      - name: Open an issue on failure
        if: failure()
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_COMMIT: ${{ github.sha }}
          WORKFLOW_URL: ${{ env.WORKFLOW_URL }}
        with:
          filename: .github/M1_MAC_FAILURE.md
          update_existing: true
